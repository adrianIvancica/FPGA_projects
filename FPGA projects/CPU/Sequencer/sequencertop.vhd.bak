library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.NUMERIC_STD.ALL;

Entity programsequencer is

	port ( DMD: inout std_logic_vector (15 downto 0);
	       Inst: in std_logic_vector (23 downto 0);
	       ASTAT: in std_logic_vector (7 downto 0);
	       Sel : in std_logic_vector ( 1 downto 0);
		clk: in std_logic;
		load: in std_logic_vector (2 downto 0);
		Reset : in std_logic;
		En : in std_logic;
		TSB_ctr : in std_logic_vector (2 downto 0);
		PMA: inout std_logic_vector (13 downto 0);
		PMD: in std_logic_vector (23 downto 0);
		cc: in std_logic_vector (3 downto 0);
		AddJump: in std_logic_vector (13 downto 0);
		AddTc: in std_logic_vector (17 downto 0);
		IRaddress: in std_logic_vector (13 downto 0)
	);
end programsequencer;

Architecture structure of programsequencer is
	generic ( 
		N : integer := 14;
		M : integer := 4
	);
component stack is
   port (
        push, pop, reset : in std_logic;
        data_in : in std_logic_vector(N-1 downto 0);
        clk : in std_logic;
        data_out : out std_logic_vector(N-1 downto 0);
        index : out std_logic_vector(15 downto 0);
        overflow, underflow : out std_logic
    );
end component stack;

component Condition_Logic is
port (	cond_code	: IN std_logic_vector(3 downto 0);	-- condition code from the instruction
	loop_cond	: IN std_logic_vector(3 downto 0);	-- condition for the DO Util loop
	status		: IN std_logic_vector(6 downto 0);	-- data from register ASTAT
	CE		: IN std_logic;				-- CE condition for the DO Util Loop
	s       	: IN std_logic;	-- control signal to select which condition code to check
	cond		: OUT std_logic
	);

end component Condition_Logic;

component incrementer is
    port ( --clk : in std_logic; -- clk
	   --reset, en : in std_logic;
	   incput : in std_logic_vector (13 downto 0);
	   incr_out: out std_logic_vector (13 downto 0)
	);
end component incrementer;
 
component loop_compare is
    port (  next_inst, last_inst: in std_logic_vector (13 downto 0);
	    clk: in std_logic;
	    isLast: out std_logic
	  );
end component loop_compare;

component next_address_Selector is 
	port (Inst		: IN std_logic_vector(23 downto 0);	-- 24 bits instruction
	      cond		: IN std_logic ;	                -- condition code from the condition logic entity
	      LastInst	        : IN std_logic;				-- loop_end condition from the loop comparator
	      rs		: IN std_logic;				-- assuming this is reset
	      add_sel	        : OUT std_logic_vector(1 downto 0);	-- 00 selects interrupt controller, 01 selects PC stack, 10 selects from the PC incrementer, 11 selects immediate value from instruction
	      Clk 		: IN std_logic
);
end component next_address_Selector ;

component program_counter is
    port (
        clk, rs : in std_logic;
        input : in std_logic_vector (13 downto 0);
        output : out std_logic_vector(13 downto 0)
    );
end component program_counter;

component Multiplexer is
	port( x , y : in std_logic_vector (13 downto 0);
	sel : in std_logic;
	xyout : out std_logic_vector(13 downto 0)
	);
end component Multiplexer;

component next_address_mux is
	port( inp1, inp2, inp3, inp4 : in std_logic_vector (13 downto 0);
	sel : in std_logic_vector (1 downto 0);
	outp : out std_logic_vector(13 downto 0)
	);
end component next_address_mux;

component tristate_buffer is
  Port
    (datain : in std_logic_vector(13 downto 0);
    enable : in std_logic;
    dataout : out std_logic_vector(13 downto 0)
    );
end component tristate_buffer;

component Register14 is
  Port(
      clk, load : in std_logic;
	input : in std_logic_vector(13 downto 0);
      output : out std_logic_vector(13 downto 0)
  );
end component Register14;

component Stack_Controller is  
	port( clk,reset: IN std_logic;
	PMD: IN std_logic_vector( 23 downto 0);
	CE, cond: IN std_logic;						-- counter expired and loop condition tested  add_sel: IN std_loglc_vector( l downto 0); - - next address selector
	push, pop: OUT std_logic_vector( 2 downto 0); 			-- Push or pop slgnals for stacks: Count, Status, PC and Loop
	rs: OUT std_logic_vector( 2 downto 0); 				-- Reset signals for stacks: Count, Status, PC and Loop  overflow: IN std_loglc_vector( 2 downto 0);
	overflow : in std_logic_vector (2 downto 0);		
	underflow: IN std_logic_vector( 2 downto 0)
);
end component Stack_Controller;

signal psl,ps2, ps3,ps4, ps9, ps10, psll, ps12,ps13,ps15: std_logic_vector( 13 downto 0);
signal psS: std_logic_vector( 17 downto 0);
signal CE, ps6, ps7: std_logic;
signal ps8: std_logic_vector( 1 downto 0);
signal push, pop, rs, Over, Under: std_logic_vector( 2 downto 0);
signal t_pMa : std_logic_vector( 13 downto 0) := "00000000000000";


begin
-- top side of the code
--loopstack : stack port map ( all of the stuff under)
 loopstack : stack port map( ps1, ps2, Reset, "00011", clk, ps3, '0', ps4, ps5);
--comparator : loop_compare ( next_inst, last_inst, clk, isLast)
 comparator: loop_compare port map ( ps4, ps5, clk, ps6);
--conditionals : Condition_Logic ( cond_code, loop_cond, status, CE, s, cond)
 conditional : ConditionalLogic port map ( cc, loop condition, status, ce, s, s7);
--stackone : stack port map( push, pop, reset, data_in, clk, data_out, index, overflow, underflow);
statusreg : Register14 port map( clk, load(0), PMA, s8);

-- bottom side of the code
-- PC : program counter (
-- PCstack :
-- Next address source select
-- Next address MUXX:
end;
