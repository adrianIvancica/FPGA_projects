library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.NUMERIC_STD.ALL;

Entity programsequencer is

	port ( 	clk: in std_logic; 
		Reset : in std_logic;   -- reset input
		
		Sel : in std_logic_vector ( 1 downto 0); -- goes to muxes
		tsb_control: in std_logic_vector (1 downto 0); -- controls the tristate buffers

		DMD: inout std_logic_vector (15 downto 0); -- connect to the DMD bus
		IR: in std_logic_vector (23 downto 0); -- connect to the instruction register
		PMA: inout std_logic_vector (13 downto 0); -- connect to the PMA, final output of program sequencer goes here

	        ASTAT: in std_logic_vector (6 downto 0); -- connect to arithmetic status bits coming from the ALU
		
	);
end programsequencer;

Architecture structure of programsequencer is
	generic ( 
		N : integer := 14;
		M : integer := 4
	);
component stack is
   port (
        push, pop, reset : in std_logic;
        data_in : in std_logic_vector(N-1 downto 0);
        clk : in std_logic;
        data_out : out std_logic_vector(N-1 downto 0);
        index : out std_logic_vector(15 downto 0);
        overflow, underflow : out std_logic
    );
end component stack;

component Condition_Logic is
port (	cond_code	: IN std_logic_vector(3 downto 0);	-- condition code from the instruction
	loop_cond	: IN std_logic_vector(3 downto 0);	-- condition for the DO Util loop
	status		: IN std_logic_vector(6 downto 0);	-- data from register ASTAT
	CE		: IN std_logic;				-- CE condition for the DO Util Loop
	s       	: IN std_logic;	-- control signal to select which condition code to check
	cond		: OUT std_logic
	);

end component Condition_Logic;

component incrementer is
    port ( --clk : in std_logic; -- clk
	   --reset, en : in std_logic;
	   incput : in std_logic_vector (13 downto 0);
	   incr_out: out std_logic_vector (13 downto 0)
	);
end component incrementer;
 
component loop_compare is
    port (  next_inst, last_inst: in std_logic_vector (13 downto 0);
	    clk: in std_logic;
	    isLast: out std_logic
	  );
end component loop_compare;

component next_address_Selector is 
	port (Inst		: IN std_logic_vector(23 downto 0);	-- 24 bits instruction
	      cond		: IN std_logic ;	                -- condition code from the condition logic entity
	      LastInst	        : IN std_logic;				-- loop_end condition from the loop comparator
	      rs		: IN std_logic;				-- assuming this is reset
	      add_sel	        : OUT std_logic_vector(1 downto 0);	-- 00 selects interrupt controller, 01 selects PC stack, 10 selects from the PC incrementer, 11 selects immediate value from instruction
	      Clk 		: IN std_logic
);
end component next_address_Selector ;

component program_counter is
    port (
        clk, rs : in std_logic;
        input : in std_logic_vector (13 downto 0);
        output : out std_logic_vector(13 downto 0)
    );
end component program_counter;

component Multiplexer is
	port( x , y : in std_logic_vector (13 downto 0);
	sel : in std_logic;
	xyout : out std_logic_vector(13 downto 0)
	);
end component Multiplexer;

component next_address_mux is
	port( inp1, inp2, inp3, inp4 : in std_logic_vector (13 downto 0);
	sel : in std_logic_vector (1 downto 0);
	outp : out std_logic_vector(13 downto 0)
	);
end component next_address_mux;

component tristate_buffer is
  Port
    (datain : in std_logic_vector(13 downto 0);
    enable : in std_logic;
    dataout : out std_logic_vector(13 downto 0)
    );
end component tristate_buffer;

component Register14 is
  Port(
      clk, load : in std_logic;
	input : in std_logic_vector(13 downto 0);
      output : out std_logic_vector(13 downto 0)
  );
end component Register14;

component Stack_Controller is  
	port( clk,reset: IN std_logic;
	PMD: IN std_logic_vector( 23 downto 0);
	CE, cond: IN std_logic;						-- counter expired and loop condition tested  add_sel: IN std_loglc_vector( l downto 0); - - next address selector
	push, pop: OUT std_logic_vector( 2 downto 0); 			-- Push or pop slgnals for stacks: Count, Status, PC and Loop
	rs: OUT std_logic_vector( 2 downto 0); 				-- Reset signals for stacks: Count, Status, PC and Loop  overflow: IN std_loglc_vector( 2 downto 0);
	overflow : in std_logic_vector (2 downto 0);		
	underflow: IN std_logic_vector( 2 downto 0)
);
end component Stack_Controller;